<?php

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\StreamWrapper\PublicStream;
use Drupal\file\Entity\File;
use Drupal\seo_textdata\Entity\TextData;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_install().
 */
function seo_textdata_install($is_syncing) {
  user_role_grant_permissions('seo', [
    'add text data entities',
    'administer text data entities',
    'delete text data entities',
    'edit text data entities',
    'view published text data entities',
    'view unpublished text data entities',
  ]);

  $directory = "public://textdata";
  Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);

  $types = Drupal::entityTypeManager()->getStorage('seo_textdata_type')->loadMultiple();
  foreach ($types as $id => $type) {
    $directory = "public://textdata/" . $type->id();
    Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
  }

  $field_config_storage = Drupal::entityTypeManager()->getStorage('field_config');
  $field_tags = $field_config_storage->load('node.article.field_tags');
  $settings = $field_tags->get('settings');
  $settings['handler_settings']['target_bundles']['typename'] = 'typename';
  $field_tags->set('settings', $settings)
    ->save();

  // Init textdata industry.
  $data = [
    '军事',
    '娱乐',
  ];
  foreach ($data as $item) {
    $term = Term::create([
      'name' => $item,
      'vid' => 'textdata_tags',
    ]);
    $term->save();
  }

  // init textdata
  $model = \Drupal::entityTypeManager()->getStorage('seo_station_model')->loadByProperties([
    'config_dir' => 'news',
  ]);

  $data_path = drupal_get_path('module', 'seo_textdata');
  $source = $data_path . '/data/';

  getFileByPath($source, 'title.txt', 'title', $model);
  getFileByPath($source, 'body.txt', 'article', $model);
  getFileByPath($source, 'type_all.txt', 'typename', $model);
  getFileByPath($source, 'webname.txt', 'webname', $model);

}

/**
 * Implements hook_update_N() for 添加node.article typename tag.
 */
function seo_textdata_update_9001(&$sandbox) {
  $field_config_storage = Drupal::entityTypeManager()->getStorage('field_config');
  $field_tags = $field_config_storage->load('node.article.field_tags');
  $settings = $field_tags->get('settings');
  $settings['handler_settings']['target_bundles']['typename'] = 'typename';
  $field_tags->set('settings', $settings)
    ->save();
}

/**
 * Implements hook_update_N() add tags for textdata.
 */
function seo_textdata_update_9003(&$sandbox) {
  $entity_definition_update_manager = Drupal::entityDefinitionUpdateManager();
  $storage_definition = BaseFieldDefinition::create('entity_reference')
    ->setLabel('行业')
    ->setSetting('target_type', 'taxonomy_term')
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
    ->setSetting('handler_settings', [
      'target_bundles' => [
        'textdata_tags' => 'textdata_tags',
      ],
    ]);
  $entity_definition_update_manager
    ->installFieldStorageDefinition('tags', 'seo_textdata', 'seo_textdata', $storage_definition);
}

/**
 * Implements hook_update_N() 给分类添加一个站群模型分类字段.
 */
function seo_textdata_update_9004(&$sandbox) {
  $config_update = Drupal::service('config_update.config_update');
  $config_update->import('field_storage_config', 'taxonomy_term.field_station_model');
  $config_update->import('field_config', 'taxonomy_term.typename.field_station_model');
}

/**
 * Implements hook_update_N() 初始化默认文件.
 */
function seo_textdata_update_9008(&$sandbox) {
  // Create default body.
  $model = \Drupal::entityTypeManager()->getStorage('seo_station_model')->loadByProperties([
    'config_dir' => 'news',
  ]);

  $data_path = drupal_get_path('module', 'seo_textdata');
  $source = $data_path . '/data/';

  getFileByPath($source, 'title.txt', 'title', $model);
  getFileByPath($source, 'body.txt', 'article', $model);
  getFileByPath($source, 'type_all.txt', 'typename', $model);
  getFileByPath($source, 'webname.txt', 'webname', $model);

}

function getFileByPath($path, $filename, $textdata_type, $model) {
  $path .= $filename;
  $file_path = Drupal::service('file_system')->copy($path, 'public://textdata/' . $textdata_type);
  $file = File::create([
    'filename' => $filename,
    'uri' => $file_path,
    'filesize' => @filesize($file_path),
    'filemime' => 'text/plain',
    'status' => FILE_STATUS_PERMANENT,
  ]);
  $file->save();

  $model = reset($model);
  if (empty($model)) {
    return;
  }
  $edit = [
    'name' => $file->getFilename(),
    'type' => $textdata_type,
    'model' => $model->id(),
    'attachment' => $file,
  ];
  TextData::create($edit)->save();
}
